# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# See documentation here: https://github.com/aws-actions/amazon-ecs-deploy-task-definition

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on:
  push:
# TODO only for testing
#    branches:
#      - main

env:
  # These values come from https://github.com/anthroarts/fargate-infrastructure
  AWS_REGION: us-west-2
#   AWS_ROLE: arn:aws:iam::474196809376:role/engelsystem-github-deploy
  AWS_ROLE: arn:aws:iam::340752843182:role/engelsystem-github-deploy # TODO, this is kobaj, dont commit this.
  CONTAINER_NAME: engelsystem
  ECR_REPOSITORY: engelsystem
  ECS_CLUSTER: Fargate
  ECS_SERVICE: engelsystem
  TASK_DEFINITION_FAMILY: engelsystem
  # These should be updated as you develop
  MAJOR_VERSION: 1
  MINOR_VERSION: 0
  PATCH_VERSION: ${{ github.run_number }}
  # Set this to true only if you want to override engelsystem terraform fargate tag configuration.
  # IE, you want to force a deployment and ignore whatever is specified for the tag inside
  # of https://github.com/anthroarts/fargate-infrastructure/blob/main/engelsystem_ecs.tf
  WRITE_NEW_TASK_DEFINITION_TAG: true # ONLY FOR DEBUGGING

permissions:
  # This is required for requesting the OIDC credentials
  # https://github.com/aws-actions/configure-aws-credentials?tab=readme-ov-file#oidc
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -f docker/Dockerfile . \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$MAJOR_VERSION \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$MAJOR_VERSION.$MINOR_VERSION \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        if: env.WRITE_NEW_TASK_DEFINITION_TAG == 'true'
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition:  task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ env.WRITE_NEW_TASK_DEFINITION_TAG == 'true' && steps.task-def.outputs.task-definition || 'task-definition.json' }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
